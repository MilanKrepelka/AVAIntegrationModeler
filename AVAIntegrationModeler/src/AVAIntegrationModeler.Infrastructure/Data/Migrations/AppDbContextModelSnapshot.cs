// <auto-generated />
using System;
using AVAIntegrationModeler.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AVAIntegrationModeler.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("AVAIntegrationModeler.Domain.AreaAggregate.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.ContributorAggregate.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.DataModelAggregate.DataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAggregateRoot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("DataModels", (string)null);
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.DataModelAggregate.DataModelField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DataModelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("FieldType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCollection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocalized")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublishedForLookup")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataModelId");

                    b.ToTable("DataModelFields", (string)null);
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.DataModelAggregate.DataModelFieldEntityTypeReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DataModelFieldId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReferencedEntityTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataModelFieldId");

                    b.HasIndex("ReferencedEntityTypeId");

                    b.HasIndex("DataModelFieldId", "ReferencedEntityTypeId")
                        .IsUnique();

                    b.ToTable("DataModelFieldEntityTypeReferences", (string)null);
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.FeatureAggregate.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Features", (string)null);
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.IntegrationMapAggregate.IntegrationsMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("IntegrationMaps", (string)null);
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.ScenarioAggregate.Scenario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("InputFeature")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OutputFeature")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Scenarios", (string)null);
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.ContributorAggregate.Contributor", b =>
                {
                    b.OwnsOne("AVAIntegrationModeler.Domain.ContributorAggregate.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("ContributorId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Extension")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ContributorId");

                            b1.ToTable("Contributors");

                            b1.WithOwner()
                                .HasForeignKey("ContributorId");
                        });

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.DataModelAggregate.DataModel", b =>
                {
                    b.HasOne("AVAIntegrationModeler.Domain.AreaAggregate.Area", null)
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.DataModelAggregate.DataModelField", b =>
                {
                    b.HasOne("AVAIntegrationModeler.Domain.DataModelAggregate.DataModel", null)
                        .WithMany("Fields")
                        .HasForeignKey("DataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.DataModelAggregate.DataModelFieldEntityTypeReference", b =>
                {
                    b.HasOne("AVAIntegrationModeler.Domain.DataModelAggregate.DataModelField", null)
                        .WithMany("EntityTypeReferences")
                        .HasForeignKey("DataModelFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.FeatureAggregate.Feature", b =>
                {
                    b.OwnsOne("AVAIntegrationModeler.Domain.ValueObjects.LocalizedValue", "Description", b1 =>
                        {
                            b1.Property<Guid>("FeatureId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CzechValue")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT")
                                .HasColumnName("Description_CZ");

                            b1.Property<string>("EnglishValue")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT")
                                .HasColumnName("Description_EN");

                            b1.HasKey("FeatureId");

                            b1.ToTable("Features");

                            b1.WithOwner()
                                .HasForeignKey("FeatureId");
                        });

                    b.OwnsOne("AVAIntegrationModeler.Domain.ValueObjects.LocalizedValue", "Name", b1 =>
                        {
                            b1.Property<Guid>("FeatureId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CzechValue")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("TEXT")
                                .HasColumnName("Name_CZ");

                            b1.Property<string>("EnglishValue")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("TEXT")
                                .HasColumnName("Name_EN");

                            b1.HasKey("FeatureId");

                            b1.ToTable("Features");

                            b1.WithOwner()
                                .HasForeignKey("FeatureId");
                        });

                    b.OwnsMany("AVAIntegrationModeler.Domain.FeatureAggregate.IncludedFeature", "IncludedFeatures", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT")
                                .HasColumnName("Id");

                            b1.Property<bool>("ConsumeOnly")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER")
                                .HasDefaultValue(false)
                                .HasColumnName("ConsumeOnly");

                            b1.Property<Guid>("FeatureId")
                                .HasColumnType("TEXT")
                                .HasColumnName("IncludedFeatureId");

                            b1.Property<Guid>("OwnerFeatureId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("FeatureId");

                            b1.HasIndex("OwnerFeatureId");

                            b1.ToTable("FeatureIncludedFeatures", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerFeatureId");
                        });

                    b.OwnsMany("AVAIntegrationModeler.Domain.FeatureAggregate.IncludedModel", "IncludedModels", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<bool>("ConsumeOnly")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER")
                                .HasDefaultValue(false)
                                .HasColumnName("ConsumeOnly");

                            b1.Property<Guid>("ModelId")
                                .HasColumnType("TEXT")
                                .HasColumnName("IncludedModelId");

                            b1.Property<Guid>("OwnerFeatureId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("ModelId");

                            b1.HasIndex("OwnerFeatureId");

                            b1.ToTable("FeatureIncludedModels", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerFeatureId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("IncludedFeatures");

                    b.Navigation("IncludedModels");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.IntegrationMapAggregate.IntegrationsMap", b =>
                {
                    b.OwnsMany("AVAIntegrationModeler.Domain.IntegrationMapAggregate.IntegrationMapItem", "Items", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("IntegrationsMapId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("ScenarioId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("IntegrationsMapId");

                            b1.HasIndex("ScenarioId");

                            b1.ToTable("IntegrationMapItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("IntegrationsMapId");

                            b1.OwnsMany("AVAIntegrationModeler.Domain.IntegrationMapAggregate.ActivationKey", "Keys", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("TEXT");

                                    b2.Property<Guid>("IntegrationMapItemId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Key")
                                        .IsRequired()
                                        .HasMaxLength(200)
                                        .HasColumnType("TEXT");

                                    b2.HasKey("Id");

                                    b2.HasIndex("IntegrationMapItemId");

                                    b2.HasIndex("Key");

                                    b2.ToTable("IntegrationMapActivationKeys", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("IntegrationMapItemId");
                                });

                            b1.Navigation("Keys");
                        });

                    b.Navigation("Items");
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.ScenarioAggregate.Scenario", b =>
                {
                    b.OwnsOne("AVAIntegrationModeler.Domain.ValueObjects.LocalizedValue", "Description", b1 =>
                        {
                            b1.Property<Guid>("ScenarioId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CzechValue")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT")
                                .HasColumnName("Description_CzechValue");

                            b1.Property<string>("EnglishValue")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT")
                                .HasColumnName("Description_EnglishValue");

                            b1.HasKey("ScenarioId");

                            b1.ToTable("Scenarios");

                            b1.WithOwner()
                                .HasForeignKey("ScenarioId");
                        });

                    b.OwnsOne("AVAIntegrationModeler.Domain.ValueObjects.LocalizedValue", "Name", b1 =>
                        {
                            b1.Property<Guid>("ScenarioId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CzechValue")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("TEXT")
                                .HasColumnName("Name_CzechValue");

                            b1.Property<string>("EnglishValue")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("TEXT")
                                .HasColumnName("Name_EnglishValue");

                            b1.HasKey("ScenarioId");

                            b1.ToTable("Scenarios");

                            b1.WithOwner()
                                .HasForeignKey("ScenarioId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.DataModelAggregate.DataModel", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("AVAIntegrationModeler.Domain.DataModelAggregate.DataModelField", b =>
                {
                    b.Navigation("EntityTypeReferences");
                });
#pragma warning restore 612, 618
        }
    }
}
